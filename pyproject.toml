[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "uhi"
description = "Unified Histogram Interface: tools to help library authors work with histograms"
authors = [
  {name="Henry Schreiner", email="henryschreineriii@gmail.com"},
  {name="Hans Dembinski", email="hans.dembinski@gmail.com"},
  {name="Jim Pivaski", email="pivarski@princeton.edu"},
]
maintainers = [
  {name="The Scikit-HEP admins", email="scikit-hep-admins@googlegroups.com"},
]
requires-python = ">=3.8"
readme = "README.md"
license = {file="LICENSE"}
dependencies = [
  "numpy>=1.13.3",
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: BSD License",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Scientific/Engineering",
  "Typing :: Typed",
]
dynamic = ["version"]

[project.urls]
Homepage = "https://github.com/Scikit-HEP/uhi"
Repository = "https://github.com/Scikit-HEP/uhi"
Documentation = "https://uhi.readthedocs.io/en/latest/"
Changelog = "https://github.com/scikit-hep/uhi/releases"

[project.optional-dependencies]
schema = [
  "fastjsonschema",
  "importlib-resources; python_version<'3.9'",
]
docs = [
  "sphinx>=4.0",
  "furo",
  "sphinx-copybutton>=0.3.1",
  "sphinx-jsonschema",
  "myst-parser",
  "sphinx_github_changelog",
]
test = [
  "pytest>=6",
  "boost-histogram>=1.0",
]


[tool.hatch]
version.source = "vcs"
build.hooks.vcs.version-file = "src/uhi/_version.py"


[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = ["error"]
testpaths = ["tests"]
log_cli_level = "info"


[tool.mypy]
files = "src"
python_version = "3.8"
warn_unused_configs = "true"
strict = true
warn_unreachable = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]

[[tool.mypy.overrides]]
module = ["fastjsonschema"]
ignore_missing_imports = true


[tool.ruff.lint]
extend-select = [
  "B",           # flake8-bugbear
  "I",           # isort
  "ARG",         # flake8-unused-arguments
  "C4",          # flake8-comprehensions
  "EM",          # flake8-errmsg
  "ICN",         # flake8-import-conventions
  "ISC",         # flake8-implicit-str-concat
  "G",           # flake8-logging-format
  "PGH",         # pygrep-hooks
  "PIE",         # flake8-pie
  "PL",          # pylint
  "PT",          # flake8-pytest-style
  "PTH",         # flake8-use-pathlib
  "RET",         # flake8-return
  "RUF",         # Ruff-specific
  "SIM",         # flake8-simplify
  "T20",         # flake8-print
  "UP",          # pyupgrade
  "YTT",         # flake8-2020
  "EXE",         # flake8-executable
  "NPY",         # NumPy specific rules
  "PD",          # pandas-vet
]
ignore = [
  "PLR",    # Design related pylint codes
  "PT004",  # Use underscore for non-returning fixture (use usefixture instead)
  "PT013",  # Incorrect import of pytest
  "ISC001", # Conflicts with formatter
]
flake8-unused-arguments.ignore-variadic-names = true
isort.required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["T20"]
"noxfile.py" = ["T20"]
"tests/test_ensure.py" = ["NPY002"]
